@model MovieReview

@using (Html.BeginForm("Submit", "DataBase", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="Left">
        @if (Request.QueryString["success"] == "true")
        {
            <div id="alert" class="alert alert-dismissible alert-success">
                <button id="dismiss" type="button" class="btn-close" data-bs-dismiss="alert"></button>
                <strong>Well done!</strong> You successfully left a review.
            </div>
        }
        
        
        <div style="display: inline-grid">
            <div style="height: 50px"></div>
            <div class="form-floating mb-3">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @autocomplete = "off", @id = "MovieName" })
                <label for="MovieName">MovieName</label>
            </div>
            <div class="form-floating mb-3">
                @Html.TextBoxFor(model => model.Rating, new { @class = "form-control", @autocomplete = "off", @id = "Rating" })
                <label for="Rating">Rating (1-5)</label>
            </div>
            <div class="form-floating mb-3">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @style = "height: 150px", @placeholder = "Description", @id = "Description" })
                <label for="Description">Description</label>
            </div>
            <div class="text-danger" id="info-text"></div>
            <button id="Submit" type="submit" class="btn btn-primary disabled">Submit</button>
        </div>
    </div>
    <div class="Right">
    </div>
}


@section scripts {
    <script>
        var typingTimer;
        var doneTypingInterval = 600;
        var movieName = $("#MovieName");
        var rating = $("#Rating");
        var description = $("#Description");
        var infoText = $("#info-text");
        
        let validMovieName = false;
        
        var movies = [];
        
        var infoTextText = "";
        
        var activate = false;
        
        
        $("#dismiss").click(function () {
            $("#alert").hide();
        });
        
        movieName[0].addEventListener("input", updateInfoText)
        rating[0].addEventListener("input", updateInfoText)
        
        function updateInfoText() {
            if (!activate) {
                activate = true;
                return; 
            }
            infoTextText = "";
            if (!validMovieName) {
                infoTextText += "Specify a movie name<br>";
                $("#Submit").addClass("disabled");
            }
            
            if (parseInt(rating.val()) < 1 || parseInt(rating.val()) > 5 || isNaN(rating.val()) || rating.val() === "") {
                infoTextText += "Rating must be between 1 and 5";
                $("#Submit").addClass("disabled");
            }
            
            if (validMovieName && parseInt(rating.val()) >= 1 && parseInt(rating.val()) <= 5) {
                $("#Submit").removeClass("disabled");
            }
            
            infoText.html(infoTextText);
        }
        
     
       
        movieName.keyup(function (event) {
            if (event.keyCode !== 27) {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            }
        });
       
        movieName.keydown(function (event) {
            if (event.keyCode == 27) {
                clearTimeout(typingTimer);
            }
        });

        
        
        function doneTyping() {
            movies = [];
            search();
        }

        function search() {
            var movieText = movieName.val();
            $.ajax({
                type: "POST",
                url: "/Database/Search",
                data: { searchString: movieText },
                dataType: "json",
                success: function (response) {
                    if (response.success) {
                        $(".Right").html("");
                        movies = [];
                        // for (let i = 0; i < result.result.length; i++) {
                        //      $(".Right").append("" +
                        //       "<div class='card'><div class='card-body'><h5 class='card-title'>" + result.result[i].Name + "</h5></div></div>");
                        // }
                        for (let i = 0; i < response.result.length; i++) {
                            var imageLink = "https://www.themoviedb.org/t/p/w440_and_h660_face" + response.result[i].poster_path;
                            var movieNameString = response.result[i].title + " (" + response.result[i].release_date.slice(0,4) + ")";
                            $(".Right").append("" +
                               "<div class='card'>" +
                                 "<div class='card-body'>" +
                                  "<h5 class='card-title'>" + movieNameString + "</h5>" +
                                  "<img style='height:30vh; display:inline;' src='" + imageLink + "'>" +
                                   "</div>" +
                                    "</div>");
                            movies.push(movieNameString);
                        }
                        
                        autocomplete(movieName[0], movies);
                    }
                },
                error: function (xhr, status, error) {
                    console.log(xhr.responseText);
                }
            });
        }
        
        
        function autocomplete(inp, arr) {
          /*the autocomplete function takes two arguments,
          the text field element and an array of possible autocompleted values:*/
          console.log("onInput");   
          var currentFocus;
          /*execute a function when someone writes in the text field:*/
          inp.addEventListener("input", onInput);
         
          /*execute a function presses a key on the keyboard:*/
          inp.addEventListener("keydown", function(e) {
              var x = document.getElementById(this.id + "autocomplete-list");
              if (x) x = x.getElementsByTagName("div");
              if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
              } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
              } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                  /*and simulate a click on the "active" item:*/
                  if (x) x[currentFocus].click();
                }
              }
          });
          
          function onInput() {
            var a, b, i,v, val = inp.value;
            validMovieName = false;
            updateInfoText()
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", inp.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            inp.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
              /*check if the item starts with the same letters as the text field value:*/
              let split = val.split(' ');
              for (v = 0; v < split.length; v++) {
                  if (arr[i].toLowerCase().includes(split[v].toLowerCase())) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.setAttribute("class", "list-group-item d-flex align-items-center");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                        
                        validMovieName = true;
                        updateInfoText()
                       
                        
                    });
                    a.appendChild(b);
                    break;
                  }
              }
            }
        }
          
          function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
          }
          function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
              x[i].classList.remove("autocomplete-active");
            }
          }
         
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
              if (elmnt != x[i] && elmnt != inp) {
              x[i].parentNode.removeChild(x[i]);
            }
          }
        }
        /*execute a function when someone clicks in the document:*/
        document.body.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
        $(document).keydown(function(event) {
            // If escape was pressed
            if (event.keyCode == 27) {
                document.body.click();
            }
            });

        onInput()
        }
        
        autocomplete(movieName[0], movies);
        
     
        
    </script>
}
